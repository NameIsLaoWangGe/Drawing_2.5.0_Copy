{
  "code": "import ADManager, { TaT } from \"../TJ/Admanager\";\r\nimport RecordManager from \"../TJ/RecordManager\";\r\nimport { Admin, Animation2D, Click, Color, EventAdmin, TimerAdmin, Tools, _Gold, _SceneName } from \"./Lwg\";\r\nimport { _GameItem } from \"./_GameItem\";\r\nimport { _PreloadUrl } from \"./_PreLoad\";\r\nimport { _SelectLevel } from \"./_SelectLevel\";\r\nimport { _Share } from \"./_Share\";\r\nexport var _Game;\r\n(function (_Game) {\r\n    let _Event;\r\n    (function (_Event) {\r\n        _Event[\"start\"] = \"_Game_start\";\r\n        _Event[\"showStepBtn\"] = \"_Game_showStepBtn\";\r\n        _Event[\"lastStep\"] = \"_Game_lastStep\";\r\n        _Event[\"nextStep\"] = \"_Game_nextStep\";\r\n        _Event[\"compelet\"] = \"_Game_compelet\";\r\n        _Event[\"playAni1\"] = \"_Game_playAni1\";\r\n        _Event[\"playAni2\"] = \"_Game_playAni2\";\r\n        _Event[\"restoreZOder\"] = \"_Game_restoreZoder\";\r\n        _Event[\"colseScene\"] = \"_Game_colseScene\";\r\n        _Event[\"victory\"] = \"_Game_victory\";\r\n        _Event[\"Photo\"] = \"_Game_Photo\";\r\n        _Event[\"turnRight\"] = \"_Game_turnRight\";\r\n        _Event[\"turnLeft\"] = \"_Game_turnLeft\";\r\n        _Event[\"generalRefresh\"] = \"_Game_generalRefresh\";\r\n    })(_Event = _Game._Event || (_Game._Event = {}));\r\n    let _Animation;\r\n    (function (_Animation) {\r\n        _Animation[\"action1\"] = \"action1\";\r\n        _Animation[\"action2\"] = \"action2\";\r\n    })(_Animation = _Game._Animation || (_Game._Animation = {}));\r\n    _Game._stepOrderImg = [];\r\n    _Game._stepMaskIndex = 0;\r\n    _Game._activate = true;\r\n    _Game._stepIndex = {\r\n        get present() {\r\n            return this['presentIndex'] ? this['presentIndex'] : 0;\r\n        },\r\n        set present(val) {\r\n            this['presentIndex'] = val;\r\n            if (this['presentIndex'] > _Game._stepIndex.max) {\r\n                _Game._stepIndex.max = this['presentIndex'];\r\n            }\r\n        },\r\n        get max() {\r\n            return this['maxIndex'] ? this['maxIndex'] : 0;\r\n        },\r\n        set max(val) {\r\n            this['maxIndex'] = val;\r\n        },\r\n    };\r\n    class _GeneralPencils {\r\n        static _init() {\r\n            this._data = Tools.objArray_Copy(_PreloadUrl._list.json.General.data);\r\n            this._pitchName = this._data[0][this._property.name];\r\n        }\r\n        static get _pitchName() {\r\n            return this['pitchName'] ? this['pitchName'] : this._data[0][this._property.name];\r\n        }\r\n        static set _pitchName(name) {\r\n            for (let index = 0; index < this._data.length; index++) {\r\n                if (name == this._data[index][this._property.name]) {\r\n                    this._data[index][this._property.pitch] = true;\r\n                    this['pitchName'] = name;\r\n                    this._pitchColor = this._data[index][this._property.color];\r\n                }\r\n                else {\r\n                    this._data[index][this._property.pitch] = false;\r\n                }\r\n                EventAdmin._notify(_Event.generalRefresh);\r\n            }\r\n        }\r\n        static _randomOne() {\r\n            let name = Tools.arrayRandomGetOne(this._data)['name'];\r\n            if (name == 'colours' || name == 'eraser') {\r\n                name = this._data[0]['name'];\r\n            }\r\n            return name;\r\n        }\r\n    }\r\n    _GeneralPencils._effectType = {\r\n        general: 'general',\r\n        colours: 'colours',\r\n        blink: 'blink',\r\n        eraser: 'eraser',\r\n    };\r\n    _GeneralPencils._property = {\r\n        _dataSource: '_dataSource',\r\n        index: 'index',\r\n        name: 'name',\r\n        color: 'color',\r\n        pitch: 'pitch',\r\n        serial: 'serial',\r\n        have: 'have',\r\n    };\r\n    _GeneralPencils._pitchColor = '';\r\n    _GeneralPencils._data = [];\r\n    _Game._GeneralPencils = _GeneralPencils;\r\n    class _ColoursPencils extends _GeneralPencils {\r\n        static get _outputColor() {\r\n            let str;\r\n            this._drawTime++;\r\n            let R;\r\n            let G;\r\n            let B;\r\n            if (1 <= this._drawTime && this._drawTime <= this._drawInterval) {\r\n                R = this._presentColorArr[0][0] + (this._presentColorArr[1][0] - this._presentColorArr[0][0]) * this._drawTime / this._drawInterval;\r\n                G = this._presentColorArr[0][1] + (this._presentColorArr[1][1] - this._presentColorArr[0][1]) * this._drawTime / this._drawInterval;\r\n                B = this._presentColorArr[0][2] + (this._presentColorArr[1][2] - this._presentColorArr[0][2]) * this._drawTime / this._drawInterval;\r\n            }\r\n            else if (this._drawInterval < this._drawTime && this._drawTime <= this._drawInterval * 2) {\r\n                R = this._presentColorArr[1][0] + (this._presentColorArr[2][0] - this._presentColorArr[1][0]) * (this._drawTime - this._drawInterval) / this._drawInterval;\r\n                G = this._presentColorArr[1][1] + (this._presentColorArr[2][1] - this._presentColorArr[1][1]) * (this._drawTime - this._drawInterval) / this._drawInterval;\r\n                B = this._presentColorArr[1][2] + (this._presentColorArr[2][2] - this._presentColorArr[1][2]) * (this._drawTime - this._drawInterval) / this._drawInterval;\r\n            }\r\n            else if (this._drawInterval * 2 < this._drawTime && this._drawTime < this._drawInterval * 3) {\r\n                R = this._presentColorArr[2][0] + (this._presentColorArr[0][0] - this._presentColorArr[2][0]) * (this._drawTime - this._drawInterval * 2) / this._drawInterval;\r\n                ;\r\n                G = this._presentColorArr[2][1] + (this._presentColorArr[0][1] - this._presentColorArr[2][1]) * (this._drawTime - this._drawInterval * 2) / this._drawInterval;\r\n                B = this._presentColorArr[2][2] + (this._presentColorArr[0][2] - this._presentColorArr[2][2]) * (this._drawTime - this._drawInterval * 2) / this._drawInterval;\r\n            }\r\n            else if (this._drawInterval * 3 - 1 < this._drawTime) {\r\n                this._drawTime = 0;\r\n                R = this._presentColorArr[0][0];\r\n                G = this._presentColorArr[0][1];\r\n                B = this._presentColorArr[0][2];\r\n            }\r\n            R = Math.round(R), G = Math.round(G), B = Math.round(B);\r\n            str = Color.RGBToHexString(R, G, B);\r\n            return str;\r\n        }\r\n        ;\r\n        static get _presentColorArr() {\r\n            return this['_presentColorArr0'] ? this['_presentColorArr0'] : [this._data[0][this._property.color + 1], this._data[0][this._property.color + 2], this._data[0][this._property.color + 3]];\r\n        }\r\n        static _setPresentColorArr() {\r\n            for (let index = 0; index < this._data.length; index++) {\r\n                const element = this._data[index];\r\n                if (element[this._property.name] == this._pitchName) {\r\n                    this['_presentColorArr0'] = [];\r\n                    this['_presentColorArr0'].push(element[this._property.color + 1]);\r\n                    this['_presentColorArr0'].push(element[this._property.color + 2]);\r\n                    this['_presentColorArr0'].push(element[this._property.color + 3]);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        static _init() {\r\n            this._data = Tools.objArray_Copy(_PreloadUrl._list.json.Colours.data);\r\n            this._pitchName = this._data[0][this._property.name];\r\n        }\r\n    }\r\n    _ColoursPencils._clickNum = 0;\r\n    _ColoursPencils._switch = false;\r\n    _ColoursPencils._drawTime = 0;\r\n    _ColoursPencils._drawInterval = 30;\r\n    _Game._ColoursPencils = _ColoursPencils;\r\n    ;\r\n    class _BlinkPencils extends _GeneralPencils {\r\n        static _randomNoHaveOne() {\r\n            let noArr = [];\r\n            for (let index = 0; index < this._data.length; index++) {\r\n                const element = this._data[index];\r\n                if (!element['have']) {\r\n                    noArr.push(element);\r\n                }\r\n            }\r\n            if (noArr.length > 0) {\r\n                let random = Tools.arrayRandomGetOne(noArr);\r\n                return random['name'];\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        static _addPencil(name) {\r\n            for (let index = 0; index < this._data.length; index++) {\r\n                const element = this._data[index];\r\n                if (element['name'] == name) {\r\n                    element['have'] = true;\r\n                    Laya.LocalStorage.setJSON('_Game_Blink', JSON.stringify(this._data));\r\n                    if (_Game._BlinkList) {\r\n                        _Game._BlinkList.refresh();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        static checkHave(name) {\r\n            let bool = false;\r\n            for (let index = 0; index < this._data.length; index++) {\r\n                const element = this._data[index];\r\n                if (element['name'] == name) {\r\n                    if (element['have']) {\r\n                        bool = true;\r\n                    }\r\n                }\r\n            }\r\n            return bool;\r\n        }\r\n        static _init() {\r\n            this._data = Tools.jsonCompare(_PreloadUrl._list.json.Blink.url, '_Game_Blink', this._property.name);\r\n        }\r\n    }\r\n    _BlinkPencils._switch = false;\r\n    _Game._BlinkPencils = _BlinkPencils;\r\n    ;\r\n    let _drawBoardProperty;\r\n    (function (_drawBoardProperty) {\r\n        _drawBoardProperty[\"originalZOder\"] = \"originalZOder\";\r\n        _drawBoardProperty[\"whetherPass\"] = \"whetherPass\";\r\n    })(_drawBoardProperty = _Game._drawBoardProperty || (_Game._drawBoardProperty = {}));\r\n    function _init() {\r\n        Admin._game.loopLevel = 12;\r\n        _GeneralPencils._init();\r\n        _BlinkPencils._init();\r\n        _ColoursPencils._init();\r\n    }\r\n    _Game._init = _init;\r\n    _Game._DhadthCont = 0;\r\n    class Game extends Admin._SceneBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.Step = {\r\n                firstRootP: null,\r\n                firstRootScaleX: null,\r\n                firstRootScaleY: null,\r\n                BtnNext: null,\r\n                BtnLast: null,\r\n                BtnTurnLeft: null,\r\n                BtnTurnRight: null,\r\n                btnSwitch: true,\r\n                automaticNext: false,\r\n                setAutomaticNext: () => {\r\n                    Laya.timer.frameOnce(120, this.Step, () => {\r\n                        if (this.Step.automaticNext) {\r\n                            EventAdmin._notify(_Event.nextStep);\r\n                            this.Step.automaticNext = false;\r\n                        }\r\n                    });\r\n                },\r\n                BtnCompelet: null,\r\n                needCut: false,\r\n                cutFocus: (func) => {\r\n                    this.Draw.len.count = 0;\r\n                    let Img = _Game._stepOrderImg[_Game._stepIndex.present];\r\n                    let Parent = Img.parent;\r\n                    if (!this.Step.needCut) {\r\n                        return;\r\n                    }\r\n                    if (Parent.name == 'Head' || Parent.name == 'Body') {\r\n                        let oriPovitX = Parent.pivotX;\r\n                        let oriPovitY = Parent.pivotY;\r\n                        if (this.Owner.name !== 'Game_wugui') {\r\n                            Tools.Node.changePovit(Parent, Parent.width / 2, Parent.height / 2, true);\r\n                        }\r\n                        let point = Parent.parent.localToGlobal(new Laya.Point(Parent.x, Parent.y));\r\n                        let diffPoint = new Laya.Point(Laya.stage.width / 2 - point.x, Laya.stage.width * 3 / 5 - point.y);\r\n                        Animation2D.move_Simple(this.ImgVar('DrawRoot'), this.ImgVar('DrawRoot').x, this.ImgVar('DrawRoot').y, this.ImgVar('DrawRoot').x + diffPoint.x, this.ImgVar('DrawRoot').y + diffPoint.y, 400, 0, () => {\r\n                            if (this.Owner.name !== 'Game_wugui') {\r\n                                Tools.Node.changePovit(Parent, oriPovitX, oriPovitY, true);\r\n                            }\r\n                            if (func) {\r\n                                func();\r\n                            }\r\n                        });\r\n                    }\r\n                },\r\n                compeletCutFocus: (func) => {\r\n                    Animation2D.move_Simple(this.ImgVar('DrawRoot'), this.ImgVar('DrawRoot').x, this.ImgVar('DrawRoot').y, this.Step.firstRootP.x, this.Step.firstRootP.y, 300, 0, () => {\r\n                        if (func) {\r\n                            func();\r\n                        }\r\n                    });\r\n                },\r\n                init: () => {\r\n                    this.ImgVar('DrawRoot').y = this.ImgVar('DrawRoot').y / 1280 * Laya.stage.height;\r\n                    let Picture = this.ImgVar('DrawRoot').getChildAt(0);\r\n                    let num = 0;\r\n                    for (let index = 0; index < Picture.numChildren; index++) {\r\n                        const element = Picture.getChildAt(index);\r\n                        if (element.name == 'Head' || element.name == 'Body') {\r\n                            num++;\r\n                        }\r\n                    }\r\n                    if (num == 2) {\r\n                        this.Step.needCut = true;\r\n                    }\r\n                    else {\r\n                        this.Step.needCut = false;\r\n                    }\r\n                    this.Step.firstRootP = new Laya.Point(this.ImgVar('DrawRoot').x, this.ImgVar('DrawRoot').y);\r\n                    this.Step.firstRootScaleX = this.ImgVar('DrawRoot').scaleX;\r\n                    this.Step.firstRootScaleY = this.ImgVar('DrawRoot').scaleY;\r\n                    let StepSwitch = Tools.Node.prefabCreate(_PreloadUrl._list.prefab2D.StepSwitch.prefab);\r\n                    this.Owner.addChild(StepSwitch)['pos'](Laya.stage.width / 2, Laya.stage.height * 0.641);\r\n                    this.Step.BtnNext = StepSwitch.getChildByName('BtnNextStep');\r\n                    this.Step.BtnLast = StepSwitch.getChildByName('BtnLastStep');\r\n                    this.Step.BtnNext.visible = false;\r\n                    this.Step.BtnLast.visible = false;\r\n                    this.Step.BtnCompelet = Tools.Node.prefabCreate(_PreloadUrl._list.prefab2D.BtnCompelet.prefab);\r\n                    this.Owner.addChild(this.Step.BtnCompelet)['pos'](563, Laya.stage.height * 0.641);\r\n                    this.Step.BtnCompelet.visible = false;\r\n                    this.Step.BtnTurnLeft = Tools.Node.prefabCreate(_PreloadUrl._list.prefab2D.BtnTurnLeft.prefab);\r\n                    this.Owner.addChild(this.Step.BtnTurnLeft)['pos'](37, Laya.stage.height * 0.838);\r\n                    this.Step.BtnTurnRight = Tools.Node.prefabCreate(_PreloadUrl._list.prefab2D.BtnTurnRight.prefab);\r\n                    this.Owner.addChild(this.Step.BtnTurnRight)['pos'](687, Laya.stage.height * 0.838);\r\n                    _Game.Shouzhi = Tools.Node.prefabCreate(_PreloadUrl._list.prefab2D.shouzhi.prefab);\r\n                    this.Owner.addChild(_Game.Shouzhi)['pos'](260, Laya.stage.height * 0.950);\r\n                    _Game.Shouzhi.zOrder = 500;\r\n                }\r\n            };\r\n            this.Draw = {\r\n                switch: false,\r\n                DrawRoot: null,\r\n                DrawBoard: null,\r\n                EraserSp: null,\r\n                DrawSp: null,\r\n                BlinkSp: null,\r\n                frontPos: null,\r\n                endPos: null,\r\n                getTex: () => {\r\n                    return _PreloadUrl._list.texture[`bishua${1 + Math.floor(Math.random() * 4)}`]['texture'];\r\n                },\r\n                getBlinkTex: () => {\r\n                    return _PreloadUrl._list.texture.blink1.texture;\r\n                },\r\n                getColor: () => {\r\n                    let color;\r\n                    if (_BlinkPencils._switch) {\r\n                        color = _BlinkPencils._pitchColor;\r\n                    }\r\n                    else {\r\n                        switch (_GeneralPencils._pitchName) {\r\n                            case _GeneralPencils._effectType.eraser:\r\n                                color = '#000000';\r\n                                break;\r\n                            case _GeneralPencils._effectType.colours:\r\n                                color = _ColoursPencils._outputColor;\r\n                                break;\r\n                            default:\r\n                                color = _GeneralPencils._pitchColor;\r\n                                break;\r\n                        }\r\n                    }\r\n                    return color;\r\n                },\r\n                getRadius: () => {\r\n                    if (this.Owner.name == 'Game_dinglaotai' || this.Owner.name == 'Game_dinglaotou' || this.Owner.name == 'Game_zhangyugege') {\r\n                        return 25;\r\n                    }\r\n                    else {\r\n                        return 50;\r\n                    }\r\n                },\r\n                draw: (Sp, x, y, tex, color) => {\r\n                    Sp.graphics.drawTexture(tex ? tex : this.Draw.getTex(), x ? x : this.Draw.frontPos.x - this.Draw.getRadius() / 2, y ? y : this.Draw.frontPos.y - this.Draw.getRadius() / 2, this.Draw.getRadius(), this.Draw.getRadius(), null, 1, color ? color : this.Draw.getColor(), null);\r\n                },\r\n                drawBlink: (x, y) => {\r\n                    if (!_BlinkPencils.checkHave(_BlinkPencils._pitchName)) {\r\n                        return;\r\n                    }\r\n                    this.Draw.BlinkSp.graphics.drawTexture(this.Draw.getBlinkTex(), x ? x : this.Draw.frontPos.x - this.Draw.getRadius() / 2, y ? y : this.Draw.frontPos.y - this.Draw.getRadius() / 2, this.Draw.getRadius(), this.Draw.getRadius(), null, 1, null, null);\r\n                },\r\n                getSpace: () => {\r\n                    if (this.Owner.name == 'Game_dinglaotai' || this.Owner.name == 'Game_dinglaotou' || this.Owner.name == 'Game_zhangyugege') {\r\n                        return 5;\r\n                    }\r\n                    else {\r\n                        return 10;\r\n                    }\r\n                },\r\n                len: {\r\n                    get count() {\r\n                        return this['lenCount'] ? this['lenCount'] : 0;\r\n                    },\r\n                    set count(val) {\r\n                        if (_Game._stepIndex.present == _Game._stepIndex.max) {\r\n                            this['lenCount'] = val;\r\n                            if (this['lenCount'] >= 50 && !_Game._stepOrderImg[_Game._stepIndex.present][_drawBoardProperty.whetherPass]) {\r\n                                EventAdmin._notify(_Event.showStepBtn);\r\n                                _Game._stepOrderImg[_Game._stepIndex.present][_drawBoardProperty.whetherPass] = true;\r\n                                this['lenCount'] = 0;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                restoration: () => {\r\n                    this.Draw.switch = false;\r\n                    this.Draw.frontPos = null;\r\n                    this.Draw.endPos = null;\r\n                    this.Draw.DrawSp = null;\r\n                    this.Draw.EraserSp = null;\r\n                },\r\n            };\r\n        }\r\n        lwgOnAwake() {\r\n            _Game._DhadthCont = Number(Laya.LocalStorage.getItem(\"_DhadthCont\"));\r\n            if (Number(Laya.LocalStorage.getItem(\"_DhadthCont\")) == 1) {\r\n                _Game._GeneralPencils._pitchName = _Game._GeneralPencils._effectType.colours;\r\n                _Game._ColoursPencils._switch = true;\r\n                _Game._ColoursPencils._clickNum = 2;\r\n            }\r\n            ADManager.TAPoint(TaT.PageShow, 'playpage');\r\n            ADManager.TAPoint(TaT.LevelStart, `level_${this.Owner.name}`);\r\n            _Gold.goldVinish(100);\r\n            _BlinkPencils._switch = false;\r\n            _Game._stepIndex.present = 0;\r\n            _Game._stepIndex.present = 0;\r\n            _Game._stepIndex.max = 0;\r\n            _Game._GeneralList1 = this.ImgVar('GeneralList1');\r\n            _Game._GeneralList1.pos(Laya.stage.width / 2, Laya.stage.height * 0.835);\r\n            _Game._stepOrderImg = [];\r\n            let index = 1;\r\n            while (this.Owner['Draw' + index]) {\r\n                let Img = this.Owner['Draw' + index];\r\n                _Game._stepOrderImg.push(Img);\r\n                Img[_drawBoardProperty.originalZOder] = Img.zOrder;\r\n                let parent = Img.parent;\r\n                if (parent != this.ImgVar('DrawRoot')) {\r\n                    parent[_drawBoardProperty.originalZOder] = parent.zOrder;\r\n                    parent[_drawBoardProperty.whetherPass] = false;\r\n                }\r\n                let DrawBoard = Img.addChild((new Laya.Sprite()).pos(0, 0));\r\n                DrawBoard.cacheAs = \"bitmap\";\r\n                DrawBoard.name = 'DrawBoard';\r\n                DrawBoard.width = Img.width;\r\n                DrawBoard.height = Img.height;\r\n                this.Owner['Draw' + index].skin = null;\r\n                index++;\r\n            }\r\n        }\r\n        lwgOpenAni() {\r\n            this.ImgVar('DrawingBoard').zOrder = 100;\r\n            this.ImgVar('DrawingBoard').width = Laya.stage.width;\r\n            this.ImgVar('DrawingBoard').height = Laya.stage.height;\r\n            let fX = this.ImgVar('DrawingBoard').x = -Laya.stage.width / 2;\r\n            let fY = this.ImgVar('DrawingBoard').y = -500;\r\n            let fR = this.ImgVar('DrawingBoard').rotation = 75;\r\n            let time = 600;\r\n            let delay = 150;\r\n            Animation2D.simple_Rotate(this.ImgVar('DrawingBoard'), fR, 0, time, delay);\r\n            Animation2D.move_Simple(this.ImgVar('DrawingBoard'), fX, fY, 0, 0, time, delay, () => {\r\n                TimerAdmin._frameOnce(30, this, () => {\r\n                    this.Step.cutFocus();\r\n                });\r\n            });\r\n            let Shadow = new Laya.Image();\r\n            this.Owner.addChild(Shadow);\r\n            Shadow.zOrder = this.ImgVar('DrawingBoard').zOrder - 1;\r\n            Shadow.skin = `Frame/UI/ui_orthogon_black.png`;\r\n            Shadow.sizeGrid = '14,16,23,12';\r\n            Shadow.width = this.ImgVar('DrawingBoard').width;\r\n            Shadow.height = this.ImgVar('DrawingBoard').height;\r\n            Shadow.x = this.ImgVar('DrawingBoard').x + 100;\r\n            Shadow.y = this.ImgVar('DrawingBoard').y + 100;\r\n            Shadow.rotation = this.ImgVar('DrawingBoard').rotation;\r\n            Animation2D.scale_Alpha(Shadow, 0.2, 1.2, 1.3, 1, 1, 0.4, time);\r\n            Animation2D.simple_Rotate(Shadow, fR - 20, 0, time, delay);\r\n            Animation2D.move_Simple(Shadow, fX, fY, 0, 0, time, delay, () => {\r\n            });\r\n            Laya.timer.loop(2000, this, () => {\r\n                Animation2D.move_Simple(_Game.Shouzhi, 260, Laya.stage.height * 0.950, 462, Laya.stage.height * 0.838, 1600, delay);\r\n            });\r\n            return time + delay;\r\n        }\r\n        lwgOnEnable() {\r\n            _Game._BlinkList = this.ListVar('BlinkList');\r\n            _Game._BlinkList.pos(Laya.stage.width / 2 + Laya.stage.width, Laya.stage.height * 0.835);\r\n            _Game._BlinkList.array = _BlinkPencils._data;\r\n            _Game._BlinkList.selectEnable = true;\r\n            _Game._BlinkList.renderHandler = new Laya.Handler(this, (cell, index) => {\r\n                let _dataSource = cell.dataSource;\r\n                let Pic = cell.getChildByName('Pic');\r\n                Pic.skin = `Game/UI/GameScene/Pencils/Blink/${_dataSource['name']}.png`;\r\n                if (_dataSource['have']) {\r\n                    Pic.gray = false;\r\n                }\r\n                else {\r\n                    Pic.gray = true;\r\n                }\r\n                if (_dataSource[_GeneralPencils._property.pitch] && _dataSource[_GeneralPencils._property.have]) {\r\n                    Pic.scale(1.2, 1.2);\r\n                }\r\n                else {\r\n                    Pic.scale(1, 1);\r\n                }\r\n            });\r\n            this.Step.init();\r\n        }\r\n        lwgOnStart() {\r\n            EventAdmin._notify(_Event.generalRefresh);\r\n            EventAdmin._notify(_Event.start);\r\n        }\r\n        lwgEventRegister() {\r\n            EventAdmin._register(_Event.generalRefresh, this, () => {\r\n                for (let index = 0; index < _Game._GeneralList1.numChildren; index++) {\r\n                    const cell = _Game._GeneralList1.getChildAt(index);\r\n                    let _dataSource = cell['_dataSource'] = _GeneralPencils._data[index];\r\n                    if (!cell.getComponent(_GameItem)) {\r\n                        cell.addComponent(_GameItem);\r\n                    }\r\n                    let Pic = cell.getChildByName('Pic');\r\n                    switch (_dataSource['name']) {\r\n                        case 'colours':\r\n                            Pic.skin = `Game/UI/GameScene/Pencils/ColoursPencils/${_ColoursPencils._pitchName}.png`;\r\n                            break;\r\n                        default:\r\n                            Pic.skin = `Game/UI/GameScene/Pencils/Single/${_dataSource['name']}.png`;\r\n                            break;\r\n                    }\r\n                    if (_dataSource[_GeneralPencils._property.pitch]) {\r\n                        Pic.scale(1.2, 1.2);\r\n                    }\r\n                    else {\r\n                        Pic.scale(1, 1);\r\n                    }\r\n                }\r\n            });\r\n            EventAdmin._register(_Event.Photo, this, () => {\r\n                this.AniVar(_Animation.action1).play();\r\n                this.AniVar(_Animation.action1).stop();\r\n                var htmlCanvas = this.Owner.drawToCanvas(this.Owner.width, this.Owner.height, 0, 0);\r\n                _Share._Data._photo._base64 = htmlCanvas.toBase64(\"image/png\", 1);\r\n            });\r\n            EventAdmin._register(_Event.colseScene, this, () => {\r\n                Tools.Node.changePovit(this.ImgVar('DrawRoot'), 0, 0);\r\n                this.ImgVar('DrawRoot').x = 0;\r\n                this.ImgVar('DrawRoot').y = 0;\r\n                let Image = this.ImgVar('DrawRoot').getChildAt(0);\r\n                Tools.Node.changePovit(Image, 0, 0);\r\n                Image.scale(Image.scaleX - 0.2, Image.scaleY - 0.2);\r\n                if (this.Owner.name == 'Game_dinglaotai' || this.Owner.name == 'Game_dinglaotou' || this.Owner.name == 'Game_zhangyugege') {\r\n                    Image.x = 130;\r\n                }\r\n                else if (this.Owner.name == 'Game_xiaohonghua') {\r\n                    Image.x = 85;\r\n                }\r\n                else if (this.Owner.name == 'Game_xiaoqiche') {\r\n                    Image.x = 130;\r\n                }\r\n                else if (this.Owner.name == 'Game_wanshengnangua') {\r\n                    Image.x = 80;\r\n                }\r\n                else if (this.Owner.name == 'Game_xiaonainiu') {\r\n                    Image.x = 55;\r\n                }\r\n                else if (this.Owner.name == 'Game_maotouying') {\r\n                    Image.x = 85;\r\n                }\r\n                else {\r\n                    Image.x = 50;\r\n                }\r\n                if (this.Owner.name == 'Game_wugui' || this.Owner.name == 'Game_haitun' || this.Owner.name == 'Game_wanshengnangua') {\r\n                    Image.y = 120;\r\n                }\r\n                else if (this.Owner.name == 'Game_xiaonainiu') {\r\n                    Image.y = 90;\r\n                }\r\n                else {\r\n                    Image.y = 100;\r\n                }\r\n                var htmlCanvas = this.Owner.drawToCanvas(this.Owner.width, this.Owner.height, 0, 0);\r\n                _SelectLevel._Data._setHaveBeenDrawn(htmlCanvas.toBase64(\"image/png\", 1));\r\n                this.lwgCloseScene();\r\n            });\r\n            EventAdmin._register(_Event.victory, this, () => {\r\n                this.AniVar(_Animation.action1).stop();\r\n                Tools.Node.changePovit(this.ImgVar('DrawRoot'), this.ImgVar('DrawRoot').width / 2, this.ImgVar('DrawRoot').height / 2);\r\n                Animation2D.move_Scale(this.ImgVar('DrawRoot'), this.ImgVar('DrawRoot').scaleX, this.ImgVar('DrawRoot').x, this.ImgVar('DrawRoot').y, this.ImgVar('DrawRoot').x, this.ImgVar('DrawRoot').y + 150, this.ImgVar('DrawRoot').scaleX / 2, 500, 500);\r\n                _Gold.goldAppear(100);\r\n            });\r\n            EventAdmin._register(_Event.playAni1, this, (loop) => {\r\n                this.AniVar(_Animation.action1).play(null, loop == undefined ? false : loop);\r\n            });\r\n            EventAdmin._register(_Event.start, this, () => {\r\n                this.Draw.switch = true;\r\n                for (let index = 0; index < _Game._stepOrderImg.length; index++) {\r\n                    if (_Game._stepIndex.present >= index) {\r\n                        _Game._stepOrderImg[index].visible = true;\r\n                    }\r\n                    else {\r\n                        _Game._stepOrderImg[index].visible = false;\r\n                    }\r\n                }\r\n                let Img = _Game._stepOrderImg[_Game._stepIndex.present];\r\n                let ImgParent = Img.parent;\r\n                if (ImgParent != this.ImgVar('DrawRoot')) {\r\n                    ImgParent.zOrder = 200;\r\n                }\r\n                Img.zOrder = 200;\r\n            });\r\n            EventAdmin._register(_Event.showStepBtn, this, () => {\r\n                if (_Game._stepIndex.present == 0) {\r\n                    this.Step.BtnNext.visible = true;\r\n                    Animation2D.fadeOut(this.Step.BtnNext, 0, 1, 300);\r\n                }\r\n                else {\r\n                    if (_Game._stepIndex.present == _Game._stepOrderImg.length - 2) {\r\n                        console.log(\"开始录屏\");\r\n                        RecordManager.startAutoRecord();\r\n                    }\r\n                    _Game.Shouzhi.visible = false;\r\n                    if (!this.Step.BtnNext.visible) {\r\n                        this.Step.BtnNext.visible = true;\r\n                        Animation2D.fadeOut(this.Step.BtnNext, 0, 1, 300);\r\n                    }\r\n                    if (!this.Step.BtnLast.visible) {\r\n                        this.Step.BtnLast.visible = true;\r\n                        Animation2D.fadeOut(this.Step.BtnLast, 0, 1, 300);\r\n                    }\r\n                }\r\n            });\r\n            EventAdmin._register(_Event.lastStep, this, () => {\r\n                if (!this.Step.btnSwitch) {\r\n                    return;\r\n                }\r\n                else {\r\n                    this.Step.btnSwitch = false;\r\n                }\r\n                this.Draw.restoration();\r\n                if (_Game._stepIndex.present - 1 >= 0) {\r\n                    let Img0 = _Game._stepOrderImg[_Game._stepIndex.present - 1];\r\n                    let Img0Parent = Img0.parent;\r\n                    Animation2D.fadeOut(Img0.getChildByName('Pic'), 0, 1, 300, 0, () => {\r\n                        let Img = _Game._stepOrderImg[_Game._stepIndex.present];\r\n                        Animation2D.fadeOut(Img.getChildByName('Pic'), 1, 0, 300, 0, () => {\r\n                            _Game._stepIndex.present--;\r\n                            this.Step.cutFocus();\r\n                            if (_Game._stepIndex.present < _Game._stepIndex.max) {\r\n                                this.Step.BtnNext.visible = true;\r\n                            }\r\n                            if (_Game._stepIndex.present == 0) {\r\n                                this.Step.BtnLast.visible = false;\r\n                            }\r\n                            EventAdmin._notify(_Event.restoreZOder);\r\n                            if (Img0Parent != this.ImgVar('DrawRoot')) {\r\n                                Img0Parent.zOrder = 200;\r\n                            }\r\n                            Img0.zOrder = 200;\r\n                            this.Step.btnSwitch = true;\r\n                            this.Draw.switch = true;\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            EventAdmin._register(_Event.nextStep, this, () => {\r\n                if (!this.Step.btnSwitch) {\r\n                    return;\r\n                }\r\n                else {\r\n                    this.Step.btnSwitch = false;\r\n                }\r\n                if (!this.Step.BtnLast.visible) {\r\n                    Animation2D.fadeOut(this.Step.BtnLast, 0, 1, 300, null, () => {\r\n                        this.Step.BtnLast.visible = true;\r\n                    });\r\n                }\r\n                EventAdmin._notify(_Event.restoreZOder);\r\n                this.Draw.restoration();\r\n                if (_Game._stepIndex.present >= _Game._stepOrderImg.length - 1) {\r\n                    EventAdmin._notify(_Event.compelet);\r\n                    Animation2D.fadeOut(_Game._stepOrderImg[_Game._stepIndex.present].getChildByName('Pic'), 1, 0, 300, 0);\r\n                }\r\n                else {\r\n                    let Img = _Game._stepOrderImg[_Game._stepIndex.present];\r\n                    Img.zOrder = Img[_drawBoardProperty.originalZOder];\r\n                    Animation2D.fadeOut(Img.getChildByName('Pic'), 1, 0, 300, 0, () => {\r\n                        let Img0 = _Game._stepOrderImg[_Game._stepIndex.present + 1];\r\n                        Img0.visible = true;\r\n                        Animation2D.fadeOut(Img0.getChildByName('Pic'), 0, 1, 300, 0, () => {\r\n                            let Img0Parent = Img0.parent;\r\n                            _Game._stepIndex.present++;\r\n                            this.Step.cutFocus();\r\n                            if (!_Game._stepOrderImg[_Game._stepIndex.present][_drawBoardProperty.whetherPass]) {\r\n                                this.Step.BtnNext.visible = false;\r\n                            }\r\n                            if (Img0Parent != this.ImgVar('DrawRoot')) {\r\n                                Img0Parent.zOrder = 200;\r\n                            }\r\n                            Img0.zOrder = 200;\r\n                            this.Step.btnSwitch = true;\r\n                            this.Draw.switch = true;\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            EventAdmin._register(_Event.restoreZOder, this, () => {\r\n                for (let index = 0; index < _Game._stepOrderImg.length; index++) {\r\n                    const element = _Game._stepOrderImg[index];\r\n                    if (element) {\r\n                        element.zOrder = _Game._stepOrderImg[index][_drawBoardProperty.originalZOder];\r\n                        let parent = element.parent;\r\n                        if (parent != this.ImgVar('DrawRoot')) {\r\n                            parent.zOrder = parent[_drawBoardProperty.originalZOder];\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            EventAdmin._register(_Event.compelet, this, () => {\r\n                this.Draw.switch = false;\r\n                this.Step.compeletCutFocus(() => {\r\n                    this.Step.BtnNext.visible = false;\r\n                    this.Step.BtnLast.visible = false;\r\n                    this.Step.BtnTurnLeft.visible = false;\r\n                    this.Step.BtnTurnRight.visible = false;\r\n                    this.Step.BtnCompelet.visible = true;\r\n                    Animation2D.fadeOut(_Game._GeneralList1, 1, 0, 200);\r\n                    Animation2D.fadeOut(_Game._BlinkList, 1, 0, 200);\r\n                });\r\n                EventAdmin._notify(_Event.restoreZOder);\r\n            });\r\n            EventAdmin._register(_Event.turnRight, this, () => {\r\n                this.Step.btnSwitch = false;\r\n                Animation2D.move_Simple(_Game._GeneralList1, _Game._GeneralList1.x, _Game._GeneralList1.y, Laya.stage.width / 2 - Laya.stage.width, _Game._GeneralList1.y, 250, 0, () => {\r\n                    Animation2D.move_Simple(_Game._BlinkList, _Game._BlinkList.x, _Game._BlinkList.y, Laya.stage.width / 2, _Game._BlinkList.y, 250, 0, () => {\r\n                        this.Step.btnSwitch = true;\r\n                        _BlinkPencils._switch = true;\r\n                    });\r\n                });\r\n            });\r\n            EventAdmin._register(_Event.turnLeft, this, () => {\r\n                this.Step.btnSwitch = false;\r\n                Animation2D.move_Simple(_Game._BlinkList, _Game._BlinkList.x, _Game._BlinkList.y, Laya.stage.width / 2 + Laya.stage.width, _Game._BlinkList.y, 250, 0, () => {\r\n                    Animation2D.move_Simple(_Game._GeneralList1, _Game._GeneralList1.x, _Game._GeneralList1.y, Laya.stage.width / 2, _Game._GeneralList1.y, 250, 0, () => {\r\n                        this.Step.btnSwitch = true;\r\n                        _BlinkPencils._switch = false;\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        onStageMouseDown(e) {\r\n            Laya.timer.clearAll(this.Step);\r\n            if (this.Draw.switch && _Game._activate) {\r\n                this.Draw.DrawRoot = _Game._stepOrderImg[_Game._stepIndex.present];\r\n                this.Draw.DrawBoard = this.Draw.DrawRoot.getChildByName('DrawBoard');\r\n                this.Draw.frontPos = this.Draw.DrawBoard.globalToLocal(new Laya.Point(e.stageX, e.stageY));\r\n                let Sp;\r\n                let DrawBoard = this.Draw.DrawRoot.getChildByName('DrawBoard');\r\n                this.Draw.frontPos = DrawBoard.globalToLocal(new Laya.Point(e.stageX, e.stageY));\r\n                if (_BlinkPencils._switch) {\r\n                    switch (_BlinkPencils._pitchName) {\r\n                        case _BlinkPencils._effectType.eraser:\r\n                            Sp = this.Draw.EraserSp = new Laya.Sprite();\r\n                            this.Draw.EraserSp.blendMode = \"destination-out\";\r\n                            break;\r\n                        default:\r\n                            Sp = this.Draw.DrawSp = new Laya.Sprite();\r\n                            this.Draw.DrawSp.blendMode = \"none\";\r\n                            this.Draw.BlinkSp = new Laya.Sprite();\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    switch (_GeneralPencils._pitchName) {\r\n                        case _GeneralPencils._effectType.eraser:\r\n                            Sp = this.Draw.EraserSp = new Laya.Sprite();\r\n                            this.Draw.EraserSp.blendMode = \"destination-out\";\r\n                            break;\r\n                        case _GeneralPencils._effectType.colours:\r\n                            Sp = this.Draw.DrawSp = new Laya.Sprite();\r\n                            this.Draw.DrawSp.blendMode = \"none\";\r\n                            break;\r\n                        default:\r\n                            Sp = this.Draw.DrawSp = new Laya.Sprite();\r\n                            this.Draw.DrawSp.blendMode = \"none\";\r\n                            break;\r\n                    }\r\n                }\r\n                DrawBoard.addChild(Sp)['pos'](0, 0);\r\n                Sp.zOrder = DrawBoard.numChildren;\r\n                this.Draw.draw(Sp);\r\n                if (_BlinkPencils._switch && _BlinkPencils._pitchName !== _BlinkPencils._effectType.eraser) {\r\n                    DrawBoard.addChild(this.Draw.BlinkSp)['pos'](0, 0);\r\n                    this.Draw.BlinkSp.zOrder = Sp.zOrder + 1;\r\n                    this.Draw.drawBlink();\r\n                }\r\n            }\r\n        }\r\n        onStageMouseMove(e) {\r\n            if (this.Draw.frontPos && this.Draw.switch && _Game._activate) {\r\n                let endPos = this.Draw.DrawBoard.globalToLocal(new Laya.Point(e.stageX, e.stageY));\r\n                let Sp;\r\n                if (_BlinkPencils._switch) {\r\n                    switch (_BlinkPencils._pitchName) {\r\n                        case _BlinkPencils._effectType.eraser:\r\n                            Sp = this.Draw.EraserSp;\r\n                            break;\r\n                        default:\r\n                            Sp = this.Draw.DrawSp;\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    switch (_GeneralPencils._pitchName) {\r\n                        case _GeneralPencils._effectType.eraser:\r\n                            Sp = this.Draw.EraserSp;\r\n                            break;\r\n                        case _GeneralPencils._effectType.colours:\r\n                            Sp = this.Draw.DrawSp;\r\n                            break;\r\n                        default:\r\n                            Sp = this.Draw.DrawSp;\r\n                            break;\r\n                    }\r\n                }\r\n                if (!Sp) {\r\n                    return;\r\n                }\r\n                this.Draw.draw(Sp);\r\n                if (_BlinkPencils._switch && _BlinkPencils._pitchName !== _BlinkPencils._effectType.eraser) {\r\n                    this.Draw.drawBlink();\r\n                }\r\n                let destance = this.Draw.frontPos.distance(endPos.x, endPos.y);\r\n                if (destance > this.Draw.getSpace()) {\r\n                    let num = destance / this.Draw.getSpace();\r\n                    let pointArr = Tools.Point.getPArrBetweenTwoP(this.Draw.frontPos, endPos, num);\r\n                    for (let index = 0; index < pointArr.length; index++) {\r\n                        this.Draw.draw(Sp, pointArr[index].x - this.Draw.getRadius() / 2, pointArr[index].y - this.Draw.getRadius() / 2);\r\n                        if (_BlinkPencils._switch && _BlinkPencils._pitchName !== _BlinkPencils._effectType.eraser) {\r\n                            this.Draw.drawBlink(pointArr[index].x - this.Draw.getRadius() / 2, pointArr[index].y - this.Draw.getRadius() / 2);\r\n                        }\r\n                    }\r\n                }\r\n                this.Draw.frontPos = endPos;\r\n            }\r\n        }\r\n        onStageMouseUp() {\r\n            if (this.Draw.len.count > 0 && _Game._activate) {\r\n                this.Step.setAutomaticNext();\r\n            }\r\n            this.Draw.frontPos = null;\r\n            if (this.Draw.DrawBoard && this.Draw.DrawBoard.numChildren > 40) {\r\n                let NewBoard = this.Draw.DrawRoot.addChild((new Laya.Sprite()).pos(0, 0));\r\n                NewBoard.width = this.Draw.DrawRoot.width;\r\n                NewBoard.height = this.Draw.DrawRoot.height;\r\n                NewBoard.cacheAs = \"bitmap\";\r\n                NewBoard.name = 'DrawBoard';\r\n                NewBoard.texture = this.Draw.DrawBoard.drawToTexture(this.Draw.DrawBoard.width, this.Draw.DrawBoard.height, this.Draw.DrawBoard.x, this.Draw.DrawBoard.y);\r\n                this.Draw.DrawBoard.removeSelf();\r\n            }\r\n        }\r\n        lwgBtnClick() {\r\n            for (let index = 0; index < _Game._stepOrderImg.length; index++) {\r\n                const element = _Game._stepOrderImg[index];\r\n                var func = () => {\r\n                    if (index == _Game._stepIndex.present) {\r\n                        this.Step.automaticNext = true;\r\n                    }\r\n                };\r\n                Click._on(Click._Type.noEffect, _Game._stepOrderImg[index], this, (e) => {\r\n                    if (this.Draw.switch && index == _Game._stepIndex.present) {\r\n                        this.Draw.len.count += 1;\r\n                    }\r\n                }, (e) => {\r\n                    if (this.Draw.frontPos && this.Draw.switch && index == _Game._stepIndex.present) {\r\n                        let endPos = this.Draw.DrawBoard.globalToLocal(new Laya.Point(e.stageX, e.stageY));\r\n                        if (_GeneralPencils._pitchName != _GeneralPencils._effectType.eraser) {\r\n                            this.Draw.len.count += this.Draw.frontPos.distance(endPos.x, endPos.y);\r\n                        }\r\n                    }\r\n                }, func, func);\r\n            }\r\n            var stop = (e) => {\r\n                e.stopPropagation();\r\n            };\r\n            Click._on(Click._Type.largen, this.Step.BtnLast, this, stop, stop, (e) => {\r\n                e.stopPropagation();\r\n                Laya.timer.clearAll(this.Step);\r\n                this.Draw.frontPos = null;\r\n                EventAdmin._notify(_Event.lastStep);\r\n                this.Draw.len.count = 0;\r\n            });\r\n            Click._on(Click._Type.largen, this.Step.BtnNext, this, stop, stop, (e) => {\r\n                e.stopPropagation();\r\n                Laya.timer.clearAll(this.Step);\r\n                this.Draw.frontPos = null;\r\n                EventAdmin._notify(_Event.nextStep);\r\n                this.Draw.len.count = 0;\r\n            });\r\n            Click._on(Click._Type.largen, this.Step.BtnTurnLeft, this, stop, stop, (e) => {\r\n                e.stopPropagation();\r\n                EventAdmin._notify(_Event.turnLeft);\r\n                _Game.Shouzhi.visible = true;\r\n            });\r\n            Click._on(Click._Type.largen, this.Step.BtnTurnRight, this, stop, stop, (e) => {\r\n                e.stopPropagation();\r\n                EventAdmin._notify(_Event.turnRight);\r\n                _Game.Shouzhi.visible = false;\r\n            });\r\n            Click._on(Click._Type.largen, this.Step.BtnCompelet, this, stop, stop, () => {\r\n                this.lwgOpenScene(_SceneName.Settle, false, () => {\r\n                    this.Step.BtnCompelet.visible = false;\r\n                });\r\n            });\r\n        }\r\n        lwgOnDisable() {\r\n            _ColoursPencils._switch = false;\r\n            ADManager.TAPoint(TaT.PageShow, 'playpage');\r\n            ADManager.TAPoint(TaT.LevelFinish, `level_${this.Owner.name} `);\r\n        }\r\n    }\r\n    _Game.Game = Game;\r\n})(_Game || (_Game = {}));\r\nexport default _Game.Game;\r\n",
  "references": [
    "C:/Users/tomato/Desktop/Drawing_2.5.0/src/script/TJ/Admanager.ts",
    "C:/Users/tomato/Desktop/Drawing_2.5.0/src/script/TJ/RecordManager.ts",
    "C:/Users/tomato/Desktop/Drawing_2.5.0/src/script/Frame/Lwg.ts",
    "C:/Users/tomato/Desktop/Drawing_2.5.0/src/script/Frame/_Execution.ts",
    "C:/Users/tomato/Desktop/Drawing_2.5.0/src/script/Frame/_GameBlinkItem.ts",
    "C:/Users/tomato/Desktop/Drawing_2.5.0/src/script/Frame/_GameItem.ts",
    "C:/Users/tomato/Desktop/Drawing_2.5.0/src/script/Frame/_PreLoad.ts",
    "C:/Users/tomato/Desktop/Drawing_2.5.0/src/script/Frame/_PropTry.ts",
    "C:/Users/tomato/Desktop/Drawing_2.5.0/src/script/Frame/_SelectLevel.ts",
    "C:/Users/tomato/Desktop/Drawing_2.5.0/src/script/Frame/_Share.ts"
  ]
}
