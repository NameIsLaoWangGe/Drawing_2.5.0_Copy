{
  "code": "import { Admin, Animation2D, Click, EventAdmin, Tools, _SceneName } from \"./Lwg\";\r\nimport { _PreloadUrl } from \"./_PreLoad\";\r\nexport var _Game;\r\n(function (_Game) {\r\n    let _Event;\r\n    (function (_Event) {\r\n        _Event[\"start\"] = \"_Game_start\";\r\n        _Event[\"showStepBtn\"] = \"_Game_showStepBtn\";\r\n        _Event[\"lastStep\"] = \"_Game_lastStep\";\r\n        _Event[\"nextStep\"] = \"_Game_nextStep\";\r\n        _Event[\"compelet\"] = \"_Game_compelet\";\r\n        _Event[\"playAni1\"] = \"_Game_playAni1\";\r\n        _Event[\"playAni2\"] = \"_Game_playAni2\";\r\n        _Event[\"restoreZOder\"] = \"_Game_restoreZoder\";\r\n    })(_Event = _Game._Event || (_Game._Event = {}));\r\n    let _Animation;\r\n    (function (_Animation) {\r\n        _Animation[\"action1\"] = \"action1\";\r\n        _Animation[\"action2\"] = \"action2\";\r\n    })(_Animation = _Game._Animation || (_Game._Animation = {}));\r\n    let _Brush;\r\n    (function (_Brush) {\r\n        _Brush[\"chalk\"] = \"chalk\";\r\n        _Brush[\"pencil\"] = \"pencil\";\r\n    })(_Brush = _Game._Brush || (_Game._Brush = {}));\r\n    _Game._stepOrderImg = [];\r\n    _Game._passLenght = 100;\r\n    _Game._stepMaskIndex = 0;\r\n    _Game._stepIndex = {\r\n        get present() {\r\n            return this['presentIndex'] ? this['presentIndex'] : 0;\r\n        },\r\n        set present(val) {\r\n            this['presentIndex'] = val;\r\n            if (this['presentIndex'] > _Game._stepIndex.max) {\r\n                _Game._stepIndex.max = this['presentIndex'];\r\n            }\r\n        },\r\n        get max() {\r\n            return this['maxIndex'] ? this['maxIndex'] : 0;\r\n        },\r\n        set max(val) {\r\n            this['maxIndex'] = val;\r\n        },\r\n    };\r\n    _Game._Pencils = {\r\n        type: {\r\n            SingleColor: 'SingleColor',\r\n            Colours: 'Colours',\r\n            Stars: 'Stars',\r\n        },\r\n        get presentUse() {\r\n            return Laya.LocalStorage.getItem('_Pencils_presentUse') ? Laya.LocalStorage.getItem('_Pencils_presentUse') : null;\r\n        },\r\n        set presentUse(name) {\r\n            Laya.LocalStorage.setItem('_Pencils_presentUse', name.toString());\r\n        },\r\n        allPencils: ['Colours', 'SingleColor', 'Stars'],\r\n        get have() {\r\n            try {\r\n                let data = Laya.LocalStorage.getJSON('_Pencils_have');\r\n                if (data) {\r\n                    return JSON.parse(data);\r\n                    ;\r\n                }\r\n                else {\r\n                    return ['SingleColor'];\r\n                }\r\n            }\r\n            catch (error) {\r\n                return ['SingleColor'];\r\n            }\r\n        },\r\n        set have(array) {\r\n            Laya.LocalStorage.setJSON('_Pencils_have', JSON.stringify(array));\r\n        },\r\n        get nohave() {\r\n            return Tools.array1ExcludeArray2(_Game._Pencils.allPencils, _Game._Pencils.have);\r\n        },\r\n        add(str) {\r\n            let arr = Tools.array_Copy(_Game._Pencils.have);\r\n            arr.push(str);\r\n            Laya.LocalStorage.setJSON('_Pencils_have', JSON.stringify(arr));\r\n        }\r\n    };\r\n    class _SingleColorPencils {\r\n        static _init() {\r\n            Admin._game.loopLevel = 12;\r\n            this._data = Tools.objArray_Copy(_PreloadUrl._list.json.SingleColor.data);\r\n            this._setPitchByName(this._data[0][this._property.name]);\r\n        }\r\n        static _setPitchByName(name) {\r\n            for (let index = 0; index < this._data.length; index++) {\r\n                if (name == this._data[index][this._property.name]) {\r\n                    this._data[index][this._property.pitch] = true;\r\n                    this._pitchName = name;\r\n                    this._pitchColor = this._data[index][this._property.color];\r\n                }\r\n                else {\r\n                    this._data[index][this._property.pitch] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _SingleColorPencils._property = {\r\n        index: 'index',\r\n        name: 'name',\r\n        color: 'color',\r\n        pitch: 'pitch',\r\n    };\r\n    _SingleColorPencils._pitchName = '';\r\n    _SingleColorPencils._pitchColor = '';\r\n    _SingleColorPencils._data = [];\r\n    _Game._SingleColorPencils = _SingleColorPencils;\r\n    class _ColoursPencils extends _SingleColorPencils {\r\n        static _init() {\r\n            this._data = Tools.objArray_Copy(_PreloadUrl._list.json.Colours.data);\r\n            this._setPitchByName(this._data[0][this._property.name]);\r\n        }\r\n    }\r\n    _Game._ColoursPencils = _ColoursPencils;\r\n    ;\r\n    class _StarsPencils extends _SingleColorPencils {\r\n        static _init() {\r\n            this._data = Tools.objArray_Copy(_PreloadUrl._list.json.Colours.data);\r\n            this._setPitchByName(this._data[0][this._property.name]);\r\n        }\r\n    }\r\n    _Game._StarsPencils = _StarsPencils;\r\n    ;\r\n    let _drawBoardProperty;\r\n    (function (_drawBoardProperty) {\r\n        _drawBoardProperty[\"originalZOder\"] = \"originalZOder\";\r\n        _drawBoardProperty[\"whetherPass\"] = \"whetherPass\";\r\n    })(_drawBoardProperty = _Game._drawBoardProperty || (_Game._drawBoardProperty = {}));\r\n    function _init() {\r\n        _SingleColorPencils._init();\r\n        _StarsPencils._init();\r\n        _ColoursPencils._init();\r\n    }\r\n    _Game._init = _init;\r\n    class _PencilsListItem extends Admin._Object {\r\n        lwgBtnClick() {\r\n            Click._on(Click._Type.largen, this.Owner, this, null, null, () => {\r\n                _SingleColorPencils._setPitchByName(this.Owner['_dataSource'][_SingleColorPencils._property.name]);\r\n                _Game._PencilsList.refresh();\r\n            });\r\n        }\r\n    }\r\n    _Game._PencilsListItem = _PencilsListItem;\r\n    class Game extends Admin._SceneBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this._drawingLenth = {\r\n                get value() {\r\n                    return this['len'] ? this['len'] : 0;\r\n                },\r\n                set value(val) {\r\n                    if (_Game._stepIndex.present == _Game._stepIndex.max) {\r\n                        this['len'] = val;\r\n                        if (this['len'] >= _Game._passLenght && !_Game._stepOrderImg[_Game._stepIndex.present][_Game._drawBoardProperty.whetherPass]) {\r\n                            EventAdmin._notify(_Game._Event.showStepBtn);\r\n                            _Game._stepOrderImg[_Game._stepIndex.present][_Game._drawBoardProperty.whetherPass] = true;\r\n                            this['len'] = 0;\r\n                        }\r\n                    }\r\n                },\r\n            };\r\n            this.drawState = {\r\n                switch: false,\r\n                EraserSp: null,\r\n                DrawSp: null,\r\n                frontPos: null,\r\n                endPos: null,\r\n                radius: {\r\n                    get value() {\r\n                        return Admin._game.level >= 10 ? 8 : 12;\r\n                    }\r\n                },\r\n                restoration: () => {\r\n                    this.drawState.switch = false;\r\n                    this.drawState.frontPos = null;\r\n                    this.drawState.endPos = null;\r\n                    this.drawState.DrawSp = null;\r\n                    this.drawState.EraserSp = null;\r\n                },\r\n            };\r\n        }\r\n        lwgOnAwake() {\r\n            _Game._passLenght = 50;\r\n            _Game._stepIndex.present = 0;\r\n            _Game._stepIndex.present = 0;\r\n            _Game._stepIndex.max = 0;\r\n            _Game._PencilsList = Laya.Pool.getItemByCreateFun('_prefab2D', _PreloadUrl._list.prefab2D.PencilsList.prefab.create, _PreloadUrl._list.prefab2D.PencilsList.prefab);\r\n            this.Owner.addChild(_Game._PencilsList)['pos'](108, 1085);\r\n            _Game._PencilsList.array = _Game._SingleColorPencils._data;\r\n            _Game._PencilsList.selectEnable = true;\r\n            _Game._PencilsList.vScrollBarSkin = \"\";\r\n            _Game._PencilsList.selectHandler = new Laya.Handler(this, (index) => { });\r\n            _Game._PencilsList.renderHandler = new Laya.Handler(this, (cell, index) => {\r\n                let _dataSource = cell.dataSource;\r\n                let Pic = cell.getChildByName('Pic');\r\n                Pic.skin = 'Game/UI/GameScene/SinglePencils/' + _dataSource['name'] + '.png';\r\n                if (_dataSource[_Game._SingleColorPencils._property.pitch]) {\r\n                    Pic.scale(1.1, 1.1);\r\n                }\r\n                else {\r\n                    Pic.scale(1, 1);\r\n                }\r\n            });\r\n            if (_Game._PencilsList.cells.length !== 0) {\r\n                for (let index = 0; index < _Game._PencilsList.cells.length; index++) {\r\n                    const element = _Game._PencilsList.cells[index];\r\n                    if (!element.getComponent(_Game._PencilsListItem)) {\r\n                        element.addComponent(_Game._PencilsListItem);\r\n                    }\r\n                }\r\n            }\r\n            _Game._stepOrderImg = [];\r\n            let index = 1;\r\n            while (this.Owner['Draw' + index]) {\r\n                let Img = this.Owner['Draw' + index];\r\n                _Game._stepOrderImg.push(Img);\r\n                Img[_Game._drawBoardProperty.originalZOder] = Img.zOrder;\r\n                let parent = Img.parent;\r\n                if (parent != this.ImgVar('DrawRoot')) {\r\n                    parent[_Game._drawBoardProperty.originalZOder] = parent.zOrder;\r\n                    parent[_Game._drawBoardProperty.whetherPass] = false;\r\n                }\r\n                this.Owner['Draw' + index].skin = null;\r\n                index++;\r\n            }\r\n        }\r\n        lwgOpenAni() {\r\n            return 100;\r\n        }\r\n        lwgOnEnable() {\r\n            this.StepSwitch = Tools.Node.prefabCreate(_PreloadUrl._list.prefab2D.StepSwitch.prefab);\r\n            this.Owner.addChild(this.StepSwitch);\r\n            this.StepSwitch.pos(194.5, 900);\r\n            this.BtnNextStep = this.StepSwitch.getChildByName('BtnNextStep');\r\n            this.BtnLastStep = this.StepSwitch.getChildByName('BtnLastStep');\r\n            this.BtnNextStep.visible = false;\r\n            this.BtnLastStep.visible = false;\r\n            this.BtnPlayAni = Tools.Node.prefabCreate(_PreloadUrl._list.prefab2D.BtnPlayAni.prefab);\r\n            this.Owner.addChild(this.BtnPlayAni);\r\n            this.BtnPlayAni.visible = false;\r\n            this.BtnPlayAni.pos(361, 920);\r\n            this.BtnBack = Tools.Node.prefabCreate(_PreloadUrl._list.prefab2D.BtnContinue.prefab);\r\n            this.Owner.addChild(this.BtnBack);\r\n            this.BtnBack.visible = false;\r\n            this.BtnBack.pos(96, 97);\r\n        }\r\n        lwgOnStart() {\r\n            EventAdmin._notify(_Game._Event.start);\r\n        }\r\n        lwgEventRegister() {\r\n            EventAdmin._register(_Game._Event.start, this, () => {\r\n                this.drawState.switch = true;\r\n                for (let index = 0; index < _Game._stepOrderImg.length; index++) {\r\n                    if (_Game._stepIndex.present >= index) {\r\n                        _Game._stepOrderImg[index].visible = true;\r\n                    }\r\n                    else {\r\n                        _Game._stepOrderImg[index].visible = false;\r\n                    }\r\n                }\r\n                let Img = _Game._stepOrderImg[_Game._stepIndex.present];\r\n                let ImgParent = Img.parent;\r\n                if (ImgParent != this.ImgVar('DrawRoot')) {\r\n                    ImgParent.zOrder = 200;\r\n                }\r\n                Img.zOrder = 200;\r\n            });\r\n            EventAdmin._register(_Game._Event.showStepBtn, this, () => {\r\n                if (_Game._stepIndex.present == 0) {\r\n                    this.BtnNextStep.visible = true;\r\n                    Animation2D.fadeOut(this.BtnNextStep, 0, 1, 300);\r\n                }\r\n                else {\r\n                    if (!this.BtnNextStep.visible) {\r\n                        this.BtnNextStep.visible = true;\r\n                        Animation2D.fadeOut(this.BtnNextStep, 0, 1, 300);\r\n                    }\r\n                    if (!this.BtnLastStep.visible) {\r\n                        this.BtnLastStep.visible = true;\r\n                        Animation2D.fadeOut(this.BtnLastStep, 0, 1, 300);\r\n                    }\r\n                }\r\n            });\r\n            EventAdmin._register(_Game._Event.lastStep, this, () => {\r\n                this.drawState.restoration();\r\n                if (_Game._stepIndex.present - 1 >= 0) {\r\n                    let Img0 = _Game._stepOrderImg[_Game._stepIndex.present - 1];\r\n                    let Img0Parent = Img0.parent;\r\n                    Animation2D.fadeOut(Img0.getChildByName('Pic'), 0, 1, 300, 0, () => {\r\n                        let Img = _Game._stepOrderImg[_Game._stepIndex.present];\r\n                        Animation2D.fadeOut(Img.getChildByName('Pic'), 1, 0, 300, 0, () => {\r\n                            _Game._stepIndex.present--;\r\n                            if (_Game._stepIndex.present < _Game._stepIndex.max) {\r\n                                this.BtnNextStep.visible = true;\r\n                            }\r\n                            if (_Game._stepIndex.present == 0) {\r\n                                this.BtnLastStep.visible = false;\r\n                            }\r\n                            EventAdmin._notify(_Game._Event.restoreZOder);\r\n                            if (Img0Parent != this.ImgVar('DrawRoot')) {\r\n                                Img0Parent.zOrder = 200;\r\n                            }\r\n                            Img0.zOrder = 200;\r\n                            this['BtnStepClose'] = false;\r\n                            this.drawState.switch = true;\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            EventAdmin._register(_Game._Event.nextStep, this, () => {\r\n                EventAdmin._notify(_Game._Event.restoreZOder);\r\n                this.drawState.restoration();\r\n                if (_Game._stepIndex.present >= _Game._stepOrderImg.length - 1) {\r\n                    EventAdmin._notify(_Game._Event.compelet);\r\n                    Animation2D.fadeOut(_Game._stepOrderImg[_Game._stepIndex.present].getChildByName('Pic'), 1, 0, 300, 0);\r\n                }\r\n                else {\r\n                    let Img = _Game._stepOrderImg[_Game._stepIndex.present];\r\n                    Img.zOrder = Img[_Game._drawBoardProperty.originalZOder];\r\n                    Animation2D.fadeOut(Img.getChildByName('Pic'), 1, 0, 300, 0, () => {\r\n                        let Img0 = _Game._stepOrderImg[_Game._stepIndex.present + 1];\r\n                        Img0.visible = true;\r\n                        Animation2D.fadeOut(Img0.getChildByName('Pic'), 0, 1, 300, 0, () => {\r\n                            let Img0Parent = Img0.parent;\r\n                            _Game._stepIndex.present++;\r\n                            if (!_Game._stepOrderImg[_Game._stepIndex.present][_Game._drawBoardProperty.whetherPass]) {\r\n                                this.BtnNextStep.visible = false;\r\n                            }\r\n                            if (Img0Parent != this.ImgVar('DrawRoot')) {\r\n                                Img0Parent.zOrder = 200;\r\n                            }\r\n                            Img0.zOrder = 200;\r\n                            this['BtnStepClose'] = false;\r\n                            this.drawState.switch = true;\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            EventAdmin._register(_Game._Event.restoreZOder, this, () => {\r\n                for (let index = 0; index < _Game._stepOrderImg.length; index++) {\r\n                    const element = _Game._stepOrderImg[index];\r\n                    if (element) {\r\n                        element.zOrder = _Game._stepOrderImg[index][_Game._drawBoardProperty.originalZOder];\r\n                        let parent = element.parent;\r\n                        if (parent != this.ImgVar('DrawRoot')) {\r\n                            parent.zOrder = parent[_Game._drawBoardProperty.originalZOder];\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            EventAdmin._register(_Game._Event.compelet, this, () => {\r\n                EventAdmin._notify(_Game._Event.restoreZOder);\r\n                this.drawState.switch = false;\r\n                this.BtnNextStep.visible = false;\r\n                this.BtnLastStep.visible = false;\r\n                this.BtnPlayAni.visible = true;\r\n                this.BtnPlayAni.zOrder = 10;\r\n                this.BtnBack.visible = true;\r\n            });\r\n        }\r\n        lwgBtnClick() {\r\n            for (let index = 0; index < _Game._stepOrderImg.length; index++) {\r\n                let DrawRoot = _Game._stepOrderImg[index];\r\n                let DrawBoard = DrawRoot.addChild((new Laya.Sprite()).pos(0, 0));\r\n                DrawBoard.cacheAs = \"bitmap\";\r\n                DrawBoard.name = 'DrawBoard';\r\n                DrawBoard.width = DrawRoot.width;\r\n                DrawBoard.height = DrawRoot.height;\r\n                Click._on(Click._Type.noEffect, DrawRoot.getChildByName('Pic'), this, (e) => {\r\n                    let Sp;\r\n                    if (index == _Game._stepIndex.present && this.drawState.switch) {\r\n                        let DrawBoard = DrawRoot.getChildByName('DrawBoard');\r\n                        this.drawState.frontPos = DrawBoard.globalToLocal(new Laya.Point(e.stageX, e.stageY));\r\n                        if (_Game._SingleColorPencils._pitchName == 'eraser') {\r\n                            Sp = this.drawState.EraserSp = new Laya.Sprite();\r\n                            this.drawState.EraserSp.blendMode = \"destination-out\";\r\n                        }\r\n                        else {\r\n                            Sp = this.drawState.DrawSp = new Laya.Sprite();\r\n                            this.drawState.DrawSp.blendMode = \"none\";\r\n                        }\r\n                        DrawBoard.addChild(Sp)['pos'](0, 0);\r\n                        Sp.graphics.drawCircle(this.drawState.frontPos.x, this.drawState.frontPos.y, this.drawState.radius.value, _Game._SingleColorPencils._pitchColor);\r\n                    }\r\n                }, (e) => {\r\n                    if (this.drawState.frontPos && index == _Game._stepIndex.present && this.drawState.switch) {\r\n                        let DrawBoard = DrawRoot.getChildByName('DrawBoard');\r\n                        let endPos = DrawBoard.globalToLocal(new Laya.Point(e.stageX, e.stageY));\r\n                        if (_Game._SingleColorPencils._pitchName == 'eraser') {\r\n                            if (this.drawState.EraserSp) {\r\n                                this.drawState.EraserSp.graphics.drawLine(this.drawState.frontPos.x, this.drawState.frontPos.y, endPos.x, endPos.y, '#000000', this.drawState.radius.value * 2);\r\n                                this.drawState.EraserSp.graphics.drawCircle(endPos.x, endPos.y, this.drawState.radius.value, '#000000');\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.drawState.DrawSp) {\r\n                                this.drawState.DrawSp.graphics.drawLine(this.drawState.frontPos.x, this.drawState.frontPos.y, endPos.x, endPos.y, _Game._SingleColorPencils._pitchColor, this.drawState.radius.value * 2);\r\n                                this.drawState.DrawSp.graphics.drawCircle(endPos.x, endPos.y, this.drawState.radius.value, _Game._SingleColorPencils._pitchColor);\r\n                                this._drawingLenth.value += this.drawState.frontPos.distance(endPos.x, endPos.y);\r\n                            }\r\n                        }\r\n                        this.drawState.frontPos = new Laya.Point(endPos.x, endPos.y);\r\n                    }\r\n                }, (e) => {\r\n                    this.drawState.frontPos = null;\r\n                    let DrawBoard = DrawRoot.getChildByName('DrawBoard');\r\n                    if (DrawBoard && DrawBoard.numChildren > 3) {\r\n                        let NewBoard = DrawRoot.addChild((new Laya.Sprite()).pos(0, 0));\r\n                        NewBoard.cacheAs = \"bitmap\";\r\n                        NewBoard.name = 'DrawBoard';\r\n                        NewBoard.width = DrawRoot.width;\r\n                        NewBoard.height = DrawRoot.height;\r\n                        NewBoard.texture = DrawBoard.drawToTexture(DrawBoard.width, DrawBoard.height, DrawBoard.x, DrawBoard.y);\r\n                        DrawBoard.destroy();\r\n                    }\r\n                });\r\n            }\r\n            Click._on(Click._Type.largen, this.BtnLastStep, this, null, null, () => {\r\n                if (this['BtnStepClose']) {\r\n                    return;\r\n                }\r\n                else {\r\n                    this['BtnStepClose'] = true;\r\n                }\r\n                EventAdmin._notify(_Game._Event.lastStep);\r\n            });\r\n            Click._on(Click._Type.largen, this.BtnNextStep, this, null, null, () => {\r\n                if (this['BtnStepClose']) {\r\n                    return;\r\n                }\r\n                else {\r\n                    this['BtnStepClose'] = true;\r\n                }\r\n                if (!this.BtnLastStep.visible) {\r\n                    Animation2D.fadeOut(this.BtnLastStep, 0, 1, 300, null, () => {\r\n                        this.BtnLastStep.visible = true;\r\n                    });\r\n                }\r\n                EventAdmin._notify(_Game._Event.nextStep);\r\n            });\r\n            Click._on(Click._Type.largen, this.BtnPlayAni, this, null, null, () => {\r\n                this.AniVar(_Game._Animation.action1).play(null, true);\r\n            });\r\n            Click._on(Click._Type.largen, this.BtnBack, this, null, null, () => {\r\n                Admin._game.level++;\r\n                this.lwgOpenScene(_SceneName.Start, this.calssName);\r\n            });\r\n        }\r\n    }\r\n    _Game.Game = Game;\r\n})(_Game || (_Game = {}));\r\nexport default _Game.Game;\r\n",
  "references": [
    "D:/Game/project/Drawing/Project_2.5.0/Drawing_2.5.0/src/script/Frame/Lwg.ts",
    "D:/Game/project/Drawing/Project_2.5.0/Drawing_2.5.0/src/script/Frame/_PreLoad.ts"
  ]
}
