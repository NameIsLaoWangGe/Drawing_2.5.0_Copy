{
  "code": "import { Admin, Click, Tools } from \"./Lwg\";\r\nimport { _PreloadUrl } from \"./_PreLoad\";\r\nexport var _SelectLevel;\r\n(function (_SelectLevel) {\r\n    class _data {\r\n        static get _arr() {\r\n            if (!this['_SelectLevel_Data']) {\r\n                this['_SelectLevel_Data'] = Tools.jsonCompare(_PreloadUrl._list.json.SelectLevel.url, '_SelectLevel_Data', _data._property.name);\r\n            }\r\n            return this['_SelectLevel_Data'];\r\n        }\r\n        ;\r\n        static set _arr(array) {\r\n            this['_SelectLevel_Data'] = array;\r\n        }\r\n        ;\r\n        static get _getLimitArr() {\r\n            let _arr = [];\r\n            for (const key in this._arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                    const element = this._arr[key];\r\n                    if (element[this._property.classify] == this._classify.limit) {\r\n                        _arr.push(element);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return _arr;\r\n        }\r\n        ;\r\n        static get _botanyArr() {\r\n            let _arr = [];\r\n            for (const key in this._arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                    const element = this._arr[key];\r\n                    if (element[this._property.classify] == this._classify.botany) {\r\n                        _arr.push(element);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return _arr;\r\n        }\r\n        ;\r\n        static get _getAnimalArr() {\r\n            let _arr = [];\r\n            for (const key in this._arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                    const element = this._arr[key];\r\n                    if (element[this._property.classify] == this._classify.animal) {\r\n                        _arr.push(element);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return _arr;\r\n        }\r\n        ;\r\n        static get _getOtherArr() {\r\n            let _arr = [];\r\n            for (const key in this._arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                    const element = this._arr[key];\r\n                    if (element[this._property.classify] == this._classify.other) {\r\n                        _arr.push(element);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return _arr;\r\n        }\r\n        ;\r\n        static getUnlockByName(name) {\r\n            let bool;\r\n            for (const key in this._arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                    const element = this._arr[key];\r\n                    if (element[this._property.name] == name) {\r\n                        bool = element[this._property.unlock];\r\n                        break;\r\n                    }\r\n                }\r\n                return bool;\r\n            }\r\n        }\r\n        ;\r\n        static getProperty(name, pro) {\r\n            let value;\r\n            for (const key in this._arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                    const element = this._arr[key];\r\n                    if (element[this._property.name] == name) {\r\n                        value = element[pro];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return value;\r\n        }\r\n        ;\r\n        static setProperty(name, pro, value) {\r\n            for (const key in this._arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                    const element = this._arr[key];\r\n                    if (element[this._property.name] == name) {\r\n                        element[pro] = value;\r\n                        _SelectLevel._MyList.refresh();\r\n                        Laya.LocalStorage.setJSON('_SelectLevel_Data', JSON.stringify(this._arr));\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return value;\r\n        }\r\n        ;\r\n    }\r\n    _data._property = {\r\n        name: 'name',\r\n        chName: 'chName',\r\n        classify: 'classify',\r\n        unlockWay: 'unlockWay',\r\n        condition: 'condition',\r\n        resCondition: 'resCondition',\r\n        unlock: 'unlock',\r\n    };\r\n    _data._classify = {\r\n        limit: 'limit',\r\n        animal: 'animal',\r\n        botany: 'botany',\r\n        other: 'other',\r\n    };\r\n    _data._unlockWay = {\r\n        free: 'free',\r\n        gold: 'gold',\r\n        ads: 'ads',\r\n    };\r\n    _SelectLevel._data = _data;\r\n    let _Event;\r\n    (function (_Event) {\r\n        _Event[\"event1\"] = \"_Example_Event1\";\r\n        _Event[\"event2\"] = \"_Example_Event2\";\r\n    })(_Event = _SelectLevel._Event || (_SelectLevel._Event = {}));\r\n    function _init() {\r\n        console.log(_data._arr);\r\n    }\r\n    _SelectLevel._init = _init;\r\n    class _SelectLevelItem extends Admin._Object {\r\n        lwgBtnClick() {\r\n            Click._on(Click._Type.largen, this.Owner, this, null, null, () => {\r\n            });\r\n        }\r\n    }\r\n    _SelectLevel._SelectLevelItem = _SelectLevelItem;\r\n    class SelectLevelBase extends Admin._SceneBase {\r\n        moduleOnAwake() {\r\n        }\r\n        moduleOnEnable() {\r\n        }\r\n        moduleEventRegister() {\r\n        }\r\n        moduleOnStart() {\r\n        }\r\n    }\r\n    _SelectLevel.SelectLevelBase = SelectLevelBase;\r\n    class SelectLevel extends _SelectLevel.SelectLevelBase {\r\n        lwgOnAwake() {\r\n        }\r\n        lwgOnEnable() { }\r\n        lwgEventRegister() { }\r\n        lwgOnStart() { }\r\n        lwgAdaptive() { }\r\n        lwgOpenAni() { return 100; }\r\n        lwgBtnClick() { }\r\n        lwgVanishAni() { return 100; }\r\n        lwgOnUpdate() { }\r\n        lwgOnDisable() { }\r\n    }\r\n    _SelectLevel.SelectLevel = SelectLevel;\r\n    class UIExampleItem extends Admin._Object {\r\n    }\r\n    _SelectLevel.UIExampleItem = UIExampleItem;\r\n})(_SelectLevel || (_SelectLevel = {}));\r\nexport default _SelectLevel.SelectLevel;\r\n",
  "references": [
    "D:/Game/project/Drawing/Project_2.5.0/Drawing_2.5.0/src/script/Frame/Lwg.ts",
    "D:/Game/project/Drawing/Project_2.5.0/Drawing_2.5.0/src/script/Frame/_PreLoad.ts"
  ]
}
